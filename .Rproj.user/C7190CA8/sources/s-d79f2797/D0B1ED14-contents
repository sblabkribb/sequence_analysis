#setwd("C:\\mydocs\\2020\\dev\\DLPE")

library(Biostrings)
library(ShortRead)
library(genbankr)
library(Rsamtools)
library(dplyr)
library(ggplot2)
library(viridis)
library(reshape2)
library(tibble)

#ref_seq <- readGenBank("pPROLar-pac.gb")
ref_seq <- readFasta("pPROLar-pac.fa")
peng_seq <- ref_seq@sread[[1]][138:2675]
#tmpd <- readFastq("fastq_pass/barcode01/ADJ605_pass_barcode01_5b7e7e31_0.fastq")
#tmpd@sread
filenames <- c("RM-sorted.bam",    # random mutation library 
               "p6-1-sorted.bam",  # 1Round Positive 10% 
               "p4-1-sorted.bam",  # 1Round Negative 10%
               "p6-2-sorted.bam",  # 2Round Positive 10%
               "p4-2-sorted.bam",  # 2Round Negative 10%
               "p6-3-sorted.bam",  # 3Round Positive 10%
               "p4-3-sorted.bam")  # 3Round Negative 10%

## refseq frequency matrix 
tmp <- sapply(1:nchar(peng_seq), 
              function(x){
                nucleotideFrequencyAt(DNAStringSet(peng_seq), at = x,  as.array=FALSE)
                })
ref_freq <- t(tmp)

## distance calculation
res_freq <- list()
for(i in 1:length(filenames)){
  filename <- filenames[i]
  cat(filename, "/", length(filenames), "\n");flush.console()
  bf <- BamFile(filename)
  pac_seqinfo <- seqinfo(bf)["pPROLar-pac"]
  end_coord <- seqlengths(pac_seqinfo)
  sbp <- ScanBamParam(which=GRanges("pPROLar-pac", IRanges(1, end_coord)))
  pparam <- PileupParam(max_depth=10000,
                        distinguish_nucleotides = TRUE,
                        include_insertions=TRUE,
                        distinguish_strands = FALSE, 
                        min_nucleotide_depth=0,
                        min_mapq=0,
                        min_base_quality=0)
  res <- pileup(filename, scanBamParam=sbp, pileupParam=pparam)
  #head(res)
  #res_sel <- res %>% filter(pos>=138 & pos<=2675) ## PenG 
  ## convert table to data.frame
  res_table <- as.data.frame.matrix(table(res$pos, res$nucleotide))
  #plot(rowSums(res_table[,1:4]), type="h")
  
  ## replace the non-zero cells to the counts 
  tmpa <- res %>% filter(nucleotide=="A")
  tmpt <- res %>% filter(nucleotide=="T")
  tmpg <- res %>% filter(nucleotide=="G")
  tmpc <- res %>% filter(nucleotide=="C")
  res_table[tmpa$pos,"A"] <- tmpa$count
  res_table[tmpt$pos,"T"] <- tmpt$count
  res_table[tmpg$pos,"G"] <- tmpg$count
  res_table[tmpc$pos,"C"] <- tmpc$count
  
  ## NT portion
  #tmp_table <- res_table
  #tmp_table[tmp_table<20]<-0
  #tmp_table[tmp_table!=0]<-1
  #plot(rowSums(tmp_table[,1:4]), type="h")
  
  res_table2 <- res_table %>% 
    select(A,C,G,T) %>% 
    rowid_to_column() %>% 
    filter(rowid>=138 & rowid<=2675) 
  
  # ## tile plot 
  # res_mlt <- melt(res_table2, id.vars="rowid")
  # p3 <- ggplot(res_mlt, aes(x=rowid, y=variable, fill=value)) +
  #   scale_fill_viridis(name="q-value",
  #                      option = 'E',
  #                      direction = -1,
  #                      na.value = "grey93") +
  #   geom_tile() + 
  #   xlab("") +  
  #   ylab("") +
  #   theme_bw() +
  #   theme(axis.text.x = element_text(colour="grey20",size=12,angle=-45, hjust = 0, vjust=1),
  #         axis.text.y = element_text(colour="grey20",size=12,angle=0),
  #         legend.text=element_text(size=14))
  # 
  # tiff(paste(pathname, "-qval.tiff", sep=""), width = 2.5, height = 7, units = 'in', res = 600, compression = 'lzw')
  # print(p3)
  # dev.off()
  # 
  res_freq[[i]] <- t(apply(res_table2[,2:5], 1, function(x){x/sum(x)}))
}


sample_diff <- lapply(res_freq, function(x){sqrt(rowSums((ref_freq-x)^2))}) %>% as.data.frame
colnames(sample_diff) <- c("RM", "1P", "1N", "2P", "2N", "3P", "3N")


## just for heatmap
sample_diff_mlt <- sample_diff %>% 
  select(-"RM") %>% 
  rowid_to_column() %>% 
  dplyr::slice(1:500) %>% 
  tidyr::pivot_longer(cols = c(-"rowid"))

ggplot(sample_diff_mlt, aes(x=rowid, y=name, fill=value)) +
  scale_fill_viridis(name="q-value",
                     option = 'C',
                     direction = 1,
                     na.value = "grey93") +
  geom_tile() +
  xlab("") +  
  ylab("") +
  theme_bw() +
  theme(axis.text.x = element_text(colour="grey20",size=12,angle=-45, hjust = 0, vjust=1),
        axis.text.y = element_text(colour="grey20",size=12,angle=0),
        legend.text=element_text(size=14))


### clustering
library(caret)
library(NbClust)
library(hrbrthemes)

## ================  NEW  ============================================= 

## scaling 
sample_diff <- sample_diff %>% 
  t %>% 
  scale %>% 
  t %>% 
  as.data.frame

boxplot(log(sample_diff))

#datasd <- apply(sample_diff, 1, sd)
#plot(datasd) 

data4cl <- sample_diff %>% 
  #mutate(sd = apply(sample_diff, 1, sd)) %>% 
  #rownames_to_column(var = "resi_pos") %>% 
  #filter(sd > 0.02) %>% 
  #select(-c(RM, sd)) 
  select(-RM)
  

wssplot <- function(data, nc=20, seed=1234){
  wss <- (nrow(data)-1)*sum(apply(data,2,var))
  for (i in 2:nc){
    set.seed(seed)
    wss[i] <- sum(kmeans(data, centers=i)$withinss)}
  plot(1:nc, wss, type="b", xlab="Number of Clusters",
       ylab="Within groups sum of squares")
}

wssplot(data4cl)

## use the best number of centers (6 in this case)
cl <- kmeans(data4cl, centers = 10, iter.max = 1000)
mydf <- data4cl %>% 
  rownames_to_column(var = "resi_pos") %>% 
  mutate(cl=factor(cl$cluster))


## split the data 
mydf2 <- mydf %>% 
  dplyr::group_by(cl) %>% 
  dplyr::group_split() %>% 
  lapply(function(x){
    dplyr::mutate(x, xpos = 1:nrow(x), o=hclust( dist(x[,-c(1,8)], method = "euclidean"), method = "average")$order)
  }) %>% 
  lapply(function(x){
    mutate(x, xposf = factor(xpos, levels=xpos[o]), ) 
  }) %>% 
  do.call(rbind, .) %>% 
  tidyr::pivot_longer(cols=-c("resi_pos", "o", "cl", "xposf", "xpos"))



ggplot(mydf2, aes(x=xpos, y=name, fill=value)) +
  scale_fill_viridis(name="Mean squared error",
                     option = 'C',
                     direction = 1,
                     na.value = "grey93") +
  geom_tile() +
  geom_tile(color="black", size=0.1) +
  xlab("") +  
  ylab("") +
  theme_bw() +
  facet_grid(cl~.) +
  theme(axis.text.x = element_blank(),
        axis.text.y = element_text(colour="grey20",size=12,angle=0),
        legend.text=element_text(size=12)) +
  # annotate(geom = "text",
  #          x = plotdata$resi_pos,
  #          y = 0,
  #          label =plotdata$resi_pos,
  #          size = 5) +
  coord_cartesian(ylim = c(-0.5, 7.5), expand = FALSE, clip = "off") +
  scale_x_discrete()








## ================  OLD  ============================================= 

colnames(sample_diff) <- c("RM", "1P", "1N", "2P", "2N", "3P", "3N")
data4cl <- sample_diff %>% 
  select(-RM) 

wssplot <- function(data, nc=20, seed=1234){
  wss <- (nrow(data)-1)*sum(apply(data,2,var))
  for (i in 2:nc){
    set.seed(seed)
    wss[i] <- sum(kmeans(data, centers=i)$withinss)}
  plot(1:nc, wss, type="b", xlab="Number of Clusters",
       ylab="Within groups sum of squares")
  }

wssplot(data4cl)

# ## it will take some time (5~10min)
# nc <- NbClust(dataforcl, min.nc=4, max.nc=7, method="kmeans")
# barplot(table(nc$Best.n[1,]),
#         xlab="Numer of Clusters", ylab="Number of Criteria",
#         main="Number of Clusters Chosen by 26 Criteria")
# table(nc$Best.n[1,])


## use the best number of centers (6 in this case)
cl <- kmeans(data4cl, centers = 5, iter.max = 1000)
mydf <- data4cl %>% 
  mutate(cl=factor(cl$cluster))

## split the data
mydf2 <- mydf %>% 
  dplyr::group_by(cl) %>% 
  dplyr::group_split() %>% 
  lapply(function(x){
    mutate(x, xpos=c(1:nrow(x)))
  }) %>% 
  do.call(rbind, .) %>% 
  rownames_to_column(var = "resi_pos") %>% 
  tidyr::pivot_longer(cols=-c("resi_pos", "cl", "xpos"))

## plot
ggplot(mydf2, aes(x=xpos, y=name, fill=value)) +
  scale_fill_viridis(name="Mean squared error",
                     option = 'C',
                     direction = 1,
                     na.value = "grey93") +
  #geom_tile(color="white", size=0.1) +
  geom_tile() +
  facet_grid(cl~.) +
  theme_ipsum_rc(plot_title_family = 'Slabo 27px') +
  theme(panel.spacing = unit(0.5, "lines")) +
  xlab("") + ylab("")


## sorting the residues within each cluster so that to see the pattern more clearly 
## split the data 
targetdat_list <- mydf %>% 
  rownames_to_column(var = "resi_pos") %>% 
  dplyr::group_by(cl) %>% 
  dplyr::group_split() %>% 
  lapply(function(x){
    select(x, -cl)
  })

targetdat <- targetdat_list[[1]]

## compute hierachical distance
o <- hclust( dist(targetdat[,-1], method = "euclidean"), method = "ward.D" )$order

#pd.m$Time <- factor( pd.m$Time, levels = rownames(data)[ord],  labels = c("0h", "0.25h", "0.5h","1h","2h","3h","6h","12h","24h","48h") )
plotdata <- targetdat %>%
  #mutate(resi_posf = factor(resi_pos)) %>% #, levels=resi_pos[o])) %>%
  mutate(resi_posf = factor(resi_pos, levels=resi_pos[o])) %>% 
  tidyr::pivot_longer(cols=-c(resi_pos, resi_posf))

ggplot(plotdata, aes(x=resi_posf, y=name, fill=value)) +
  scale_fill_viridis(name="Mean squared error",
                     option = 'C',
                     direction = 1,
                     na.value = "grey93") +
  geom_tile() +
  #geom_tile(color="white", size=0.1) +
  xlab("") +  
  ylab("") +
  theme_bw() +
  #theme(axis.text.x = element_text(colour="grey20",size=12,angle=-45, hjust = 0, vjust=1),
  #      axis.text.y = element_text(colour="grey20",size=12,angle=0),
  #      legend.text=element_text(size=14)) +
  theme(axis.text.x = element_blank(),
        axis.text.y = element_text(colour="grey20",size=12,angle=0),
        legend.text=element_text(size=14)) +
  annotate(geom = "text", 
           x = plotdata$resi_pos, 
           y = 0, 
           label =plotdata$resi_pos, 
           size = 5) +
  coord_cartesian(ylim = c(-0.5, 7.5), expand = FALSE, clip = "off") +
  scale_x_discrete()


