---
title: "Untitled"
output: html_document
date: '2022-09-22'
---


# fastq file loading


일반적으로 ShortRead 패키지 사용, 본 교육에서는 bioconductor의 `Rfastp` 패지키 사용 


```{r, eval=F}
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("Rfastp")
```


파일을 다운로드하고 `rfastp` 파일로 읽음. 


```{r, eval=F}
library(Rfastp)

fq <- "https://www.encodeproject.org/files/ENCFF332KDA/@@download/ENCFF332KDA.fastq.gz"
download.file(fq, "ENCFF332KDA.fastq.gz")


json_report <- rfastp(read1 = "ENCFF332KDA.fastq.gz", outputFastq = "ENCFF332KDA_rfastp")
qcSummary(json_report)

```


# Alignment 


- create a reference genome


```{r, eval=F}
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("BSgenome.Mmusculus.UCSC.mm10")
```



```{r, eval=F}
library("BSgenome.Mmusculus.UCSC.mm10")


#mainChar <- paste0("chr", c(1:19, "X", "Y", "M"))
mainChar <- paste0("chr", c(1:2))
mainCharSeq <- lapply(mainChar, function(x){
  BSgenome.Mmusculus.UCSC.mm10[[x]]
})

names(mainCharSeq) <- mainChar
mainCharSeqSet <- DNAStringSet(mainCharSeq)
mainCharSeqSet

writeXStringSet(mainCharSeqSet, "BSgenome.Mmusculus.UCSC.mm10.chr1chr2.fa")

```

SAF format features 형태의 정보 저장 


```{r, eval=F}

if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("TxDb.Mmusculus.UCSC.mm10.knownGene")

```


```{r, eval=F}
library(plyranges)
library("TxDb.Mmusculus.UCSC.mm10.knownGene")
myexons <- exons(TxDb.Mmusculus.UCSC.mm10.knownGene, columns = c("tx_id", "gene_id"))
myexons$gene_id
myexons <- myexons %>% 
  filter(lengths(gene_id)==1)

dfexons <- as.data.frame(myexons)
saf <- data.frame(GeneID = dfexons$gene_id, 
                  Char = dfexons$seqnames, 
                  Start = dfexons$start, 
                  End = dfexons$end, 
                  Strand =dfexons$strand)


```



align 전에 index를 생성해야 함. Rsubread 패키지 사용


```{r, eval=F}
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("Rsubread")
```




```{r, eval=F}
library(Rsubread)

buildindex("mm10_mainchars", "BSgenome.Mmusculus.UCSC.mm10.chr1chr2.fa", memory = 16000, indexSplit = T)
```
~~~
 Total running time: 6.2 minutes for 1, 2 chromosomes   
~~~



- intron 고려한 mapping
- SAF format, it can be provided as a file or a data frame.

```{r, eval=F}
library(Rsubread)
alignstat <- align("mm10_mainchars",
                   readfile1 = "ENCFF332KDA_rfastp_R1.fastq.gz",
                   nthreads = 10, 
                   annot.ext = saf)


alignstat <- subjunc("mm10_mainchars",
                   readfile1 = "ENCFF332KDA_rfastp_R1.fastq.gz",
                   nthreads = 10, 
                   annot.ext = saf)

alignstat

```

```{r, eval=F}

library(Rsamtools)

sortBam(file = "ENCFF332KDA_rfastp_R1.fastq.gz.subjunc.BAM", 
        "Sorted_ENCFF332KDA_rfastp_R1.fastq.gz.subjunc.BAM")
indexBam("Sorted_ENCFF332KDA_rfastp_R1.fastq.gz.subjunc.BAM.bam")

```



- counting



```{r, eval=F}

geneexons <- exonsBy(TxDb.Mmusculus.UCSC.mm10.knownGene, by="gene")
#class(myexons)
geneexons[1:3]
```


```{r, eval=F}
library(GenomicAlignments)

myBam <- BamFile("Sorted_ENCFF332KDA_rfastp_R1.fastq.gz.subjunc.BAM.bam", 
                 yieldSize = 10000)

genecount <- summarizeOverlaps(geneexons, myBam, ignore.strand = T)
genecount

nonoverlapexons <- disjointExons(TxDb.Mmusculus.UCSC.mm10.knownGene)
nonoverlapexons[1:3]

genecount2 <- summarizeOverlaps(nonoverlapexons, 
                                myBam, 
                                ignore.strand = T)

#genecounts <- assay(genecount2)
exoncounts <- assay(genecount)

```


# featureCount


```{r, eval=F}
featureCounts()
?featureCounts

countstat <- featureCounts(files = "ENCFF332KDA_rfastp_R1.fastq.gz.subjunc.BAM",
                           annot.ext = saf, 
                           nthreads = 10)


```









