---
title: "Barcode sequencing"
author: "한국생명공학연구원 합성생물학전문연구단 "
output:
  pdf_document:
    latex_engine: xelatex
    number_sections: yes
  html_document:
    toc: yes
    number_sections: yes
    df_print: paged
  output: rtf_document
  word_document:
    toc: yes
header-includes: \usepackage[hangul]{kotex}
mainfont: NanumGothic
---


```{r, eval=F}
library(Biostrings)
library(ShortRead)
```


# 목적 

바코드를 이용해서 pooling된 PCR product들을 Nanopore 로 시퀀싱 한 후에 결과 서열을 확인하는 기술로서 빠르고 대량의 서열을 한번에 확인할 수 있는 기술

# 바코드 생성

96well 각 웰마다 다른 barcoding을 위해서 forward 와 reverse primer에 각각 8개 12개 바코드를 사용하여 PCR product를 만들어냄. Nanopore 시퀀싱 에러를 고려해서 길이를 탐색했으며 필요한 20개 바코드는 6bp 정도로 충분한 것으로 판단. 실제로는 7bp 만들어서 김동명 교수님 전달 (3/13)

https://www.bioconductor.org/packages/release/bioc/vignettes/DNABarcodes/inst/doc/DNABarcodes.html

아래 fasta 파일 참고

```{r, eval=F}
barcodes <- readDNAStringSet("Nanopore_PCR_barcodes.fasta")
```

![](images/barcodes.png)

# 바코드 읽기

김동명 교수님 팀에서 실험 완료 후 박아영 학생에 PCR 샘플 전달 (4/19). 사용한 바코드는 앞쪽에 붙는 바코드는 ABCD 4개, 뒤쪽에 붙는 바코드는 12345 5개. 

![](images/cnu_barcodes.png)


```{r, eval=F}

bcfor <- c(a="GGTTAGT",
b="AGGATCA",
c="TCGCGTT",
d="GGAAGAA",
e="CAGAGAA",
f="ACCAGAA",
g="GACGGAA",
h="AGTGGAA")

bcrev <- c(
"TCACGAA",
"GTTCGAA",
"TGGTGAA",
"CTCTGAA",
"CCAACAA",
"GTGACAA",
"AAGGCAA",
"TGCGCAA",
"GAACCAA",
"CGTCCAA",
"GCCTCAA",
"CGCATAA"
)

```

# Fastq 파일 읽기

박아영 연구원이 Nanopore 실험을 수행했으며 다음 위치에 저장. `fastq`파일은 `ShortRead` 패키지의 `readFastq` 함수를 사용해서 읽어옴. 

```{r, eval=F}

fastqdir <- "~/153_seqdb/NGS/02_ont/2021/210419cnu/20210419_0726_MC-110372_0_agh283_3bc09499/fastq_pass/barcode07/"
filenames <- dir(fastqdir)

fq <- readFastq(paste0(fastqdir, filenames[1]))
sread(fq[1:5])
```

![](images/Screenshot from 2021-04-27 17-39-22.png)

모든 fastq 파일을 읽고 quality 정보를 얻을 수 있음. 

```{r, eval=F}
## quality accessment
#qasummary <- qa(paste0(fastqdir, filenames), type="fastq")
#report(qasummary)
#qasummary[["readCounts"]]
```

# Filtering & Trimming

Nanopore 해독 서열의 filtering 을 위해서 [NanoFilt](https://github.com/wdecoster/nanofilt) 를 사용함. 이를 위해서 `NanoFilt` 소프트웨어를 pip를 이용해서 미리 linux 컴퓨터에 설치해 둘 필요가 있음. phred score는 10, 길이는 500이하 자름. `nanopore_cnt` 디렉토리에 필터링한 데이터 저장. 

```{r, eval=F}

fastqdir <- "~/153_seqdb/NGS/02_ont/2021/210419cnu/20210419_0726_MC-110372_0_agh283_3bc09499/fastq_pass/barcode07/"
targetdir <- "./nanopore_cnu/"
if(!file.exists(targetdir)){
  dir.create(targetdir)
}

filenames <- dir(fastqdir)
for(i in 1:length(filenames)){
  fn <- filenames[i]
  targetfn <- paste0("filtered_", fn)
  
  commandstr <- paste0("NanoFilt -q 10 -l 500 --headcrop 50 ", fastqdir, fn, " > ", targetdir, targetfn)
  tl <- try(system(commandstr))
  
  fq <- readFastq(paste0(targetdir, targetfn))
  myseq <- sread(fq)
  cat(i, "\n"); flush.console()
}
#hist(nchar(myseq), br=100)


```

# Read 전처리
필터링된 데이터들을 읽어들이고 길이 등 데이터를 확인함. 1500bp 이상의 read는 제외함. 

```{r, eval=F}
targetdir <- "./nanopore_cnu/"
filenames <- dir(targetdir)
for(i in 1:length(filenames)){
  fq <- readFastq(paste0(targetdir, filenames[i]))
  if(i == 1){
    myseq <- sread(fq)  
  }else{
    myseq <- c(myseq, sread(fq))
  }
  cat(i, "\n"); flush.console()
}

hist(nchar(myseq), br=100)
## filtering out > 1500
selseq <- myseq[-which(nchar(myseq) > 1500)]
hist(nchar(selseq), br=100)
```

![](images/000009.png)

![](images/Screenshot from 2021-04-29 16-52-49.png)

결과적으로 약 16413개의 read 들을 확보 했으며 이는 만약 96well에 실험한 경우 (96개 샘플) 한 개의 샘플당 160개 이상의 완전한 서열을 확보할 수 있으므로 나노포어의 오류율을 감안하더라도 충분히 서열을 ID 할 수 있을 것으로 기대함. 

# 서열 로딩  

바코드 위치를 찾기 위해서 `DECIPHER` 패키지를 사용함. 

```{r, eval=F}
library(DECIPHER)
dbConn <- dbConnect(SQLite(), ":memory:")
Seqs2DB(selseq, "XStringSet", dbConn, "barcodedPCR")
#BrowseDB(dbConn)

l <- IdLengths(dbConn)
Add2DB(l, dbConn)
#BrowseDB(dbConn)

## sequence
dna <- SearchDB(dbConn, identifier="barcodedPCR")
BrowseSeqs(dna[1:100])
dbDisconnect(dbConn)
#forpatterns <- DNAStringSet(bcfor)
#revpatterns <- reverseComplement(DNAStringSet(bcrev))
#BrowseSeqs(dna[1:1000], patterns=forpatterns, colWidth=500)
#BrowseSeqs(dna, patterns=revpatterns, colWidth=500)

```

![](images/Screenshot from 2021-04-29 16-56-11.png)

# Template 서열 변환 

read들 중 3' to 5' (template strand)와 5' to 3' (nontemplate strand) 이 있을 수 있으며 sfgfp 서열을 (ATG부터 100bp) 이용해서 template strand를 검색 후 해당 서열들을 nontemplate strand로 바꿔서 탐색을 진행. 


![](images/Screenshot from 2021-04-30 10-11-14.png)


```{r, eval=F}
## sfgfp sequence
fread <- readFasta("QLI61463.1_super folder green fluorescent protein.fa")
vectorseq <- sread(fread)
sfgfpseq <- subseq(vectorseq, 708, 1424)
sfgfprev <- reverseComplement(sfgfpseq)

## replace template seqs to nontemplate seqs in dna sequences 
sfgfptemp <- vmatchPattern(subseq(as.character(sfgfprev), 1, 100), dna, min.mismatch=0, max.mismatch=30) %>% stack
template_seqname <- as.character(mcols(sfgfptemp)$name)
dnatemplate <- dna[template_seqname]
dna[template_seqname] <- reverseComplement(dnatemplate)

## new the sequence database in the memory 
dbDisconnect(dbConn)
dbConn <- dbConnect(SQLite(), ":memory:")
Seqs2DB(dna, "XStringSet", dbConn, "barcodedPCR")
#BrowseDB(dbConn)

## sequence
dna <- SearchDB(dbConn, identifier="barcodedPCR")
BrowseSeqs(dna[1:100])

```

# 바코드 있는 read 선별 

모든 read서열을 5' to 3' (nontemplate strand)로 전환하였으므로 barcode forward가 앞에 위치하고 barcode reverse가 뒷쪽에 위치하는 서열 탐색 수행. mixmatch 가 1, 즉 에러를 1개 허용하고 다른 basepair가 다 맞는 바코드를 찾음. 

```{r, eval=F}

pfor <- bcfor[1]
prev <- bcrev[1]

## forwared
mindexf <- vmatchPattern(pfor, dna, min.mismatch=0, max.mismatch=1)
nfor <- elementNROWS(mindexf) != 0
## reverse
mindexr <- vmatchPattern(prev, dna, min.mismatch=0, max.mismatch=1)
nrev <- elementNROWS(mindexr) != 0

c(sum(nfor), sum(nrev))
i <- which(nfor + nrev == 2)
i <- which(nfor & nrev)
length(i)
BrowseSeqs(dna[i], patterns = c(pfor, prev))

```

bcfor[1] (GGTTAGT) 서열을 forward primer로 갖는 read는 약 6561개 이고 bcrev[1] (GTTCGAA)의 reverse complement를 reverse primer로 갖는 서열은 15672개임. 둘 다를 가지고 있는 read는 약 6353개임 (한 서열내 여러 hit이 있는 경우 고려 안 한 상태)


![](images/Screenshot from 2021-04-30 10-21-31.png)

위와 같이 앞 뒤 바코드 둘을 모두 갖는 read들이 대부분이나 그 중 일부 서열은 중간중간 해당 바코드와 같은 서열들이 들어있어서 선택된 경우가 있음. 그러나 대부분의 서열이 일정 간격으로 두 바코드가 떨어져 있으므로 이를 이용해서 적당한 Filtering을 수행하는 것이 좋음. 

중복되는 hit을 제거하고 `%in%` 연산자를 사용해서 공통 hit에 대한 서열을 선별함. 이 후 첫 번째 바코드의 시작위치와 두 번째 바코드의 시작위치를 이용한 거리를 계산함.  

`vmatchPattern` 함수의 반환값은 `IRanges` 타입의 요소를 갖는 list이므로 다음과 같이 두 바코드 사이의 거리를 구할 수 있음. 참고로 한 서열 내에 여러개의 hit이 있는 경우도 고려 해야하지만 분석의 편의를 위해서 (충분히 많은 read가 있으므로) 하나 이상의 hit이 있는 read는 분석에서 제외함. 단, 두 프라이머에의해서 생성되는 PCR product를 1000bp로 가정했으므로 forward barcode는 최대한 앞쪽에 위치하는 것을 찾고 reverse primer 서열은 최대한 뒤쪽에 위치하는 것을 찾음. 

```{r,  eval=F}
library(tidyverse)
forhit <- vmatchPattern(pfor, dna, min.mismatch=0, max.mismatch=1) %>% stack
revhit <- vmatchPattern(prev, dna, min.mismatch=0, max.mismatch=1) %>% stack

## remove duplicated hits
## see duplicated(c(1,1,2,2,3,4))
forhit <- forhit[!duplicated(as.character(mcols(forhit)$name))]

## reordering
revhit2 <- revhit[length(revhit):1]
revhit2 <- revhit2[!duplicated(as.character(mcols(revhit2)$name))] 
revhit <- revhit2[length(revhit2):1]

## distance
selifor <- which(as.character(mcols(forhit)$name) %in% as.character(mcols(revhit)$name))
forstarti <- start(forhit[selifor])
forhit <- forhit[selifor]
selirev <- which(as.character(mcols(revhit)$name) %in% as.character(mcols(forhit)$name))
revstarti <- start(revhit[selirev])
revhit <- revhit[selirev]
d <- revstarti - forstarti

hist(d, br=100)

```

# z-test I

위 거리 값을 이용한 filtering을 수행하기 위해서 실험 조건상 타깃 read의 길이가 1000bp에 가까움을 가정하고 있으므로 (사용된 sfgfp는 아래 참고) 1000을 기준으로 z 변환을 수행한 후 p-value를 구함. 

![](images/Screenshot from 2021-05-03 16-16-42.png)

z 변환을 수행 후 pvalue 0.3를 기준으로 (주관적 판단) 유의하지 않은 read들 (분포의 중심에 있는 read들)을 선정. [z변환 관련 설명](https://www.cyclismo.org/tutorial/R/pValues.html). 

```{r, eval=F}
m <- 1000
z <- (d-m)/sd(d)
pvals <- 2*pnorm(-abs(z))
sigi <- which(pvals>0.3)

hist(d[sigi], br=100)

selreads <- dna[as.character(mcols(revhit)$name)]
sigreads <- selreads[sigi]
BrowseSeqs(sigreads, patterns = c(pfor, prev))
```

![](images/Screenshot from 2021-05-03 16-17-19.png)

약 3141개의 유의한 read가 선택되었고 z-테스트 후 위와 같이 800bp 근처 분포의 read들이 선정되었음을 알 수 있음. 

# 타깃 UTR 서열 추출


우리가 최종적으로 필요한 서열은 5' barcode primer 부터 sfGFP가 시작하는 서열 앞까지임 (UTR부분). sfgfp의 서열 "ATGAGCAAAGGT"로 위 조건에 맞는 서열을을 뽑음 

```{r, eval=F}
sfgfphead <- substr(sfgfpseq, 1, 12)
BrowseSeqs(sigreads, patterns = c(bcfor[1], sfgfphead))

```

![](images/Screenshot from 2021-04-30 16-19-23.png)

위에 보이는 두 모티프 서열의 중간 서열을 뽑아내는 작업이 필요하며 이는 앞서 사용했던 `vmatchPattern`과 `stack` 함수를 사용하면 됨. sfgfp의 서열이 존재하지 않는 read는 있을 수 있으며 이러한 read들도 제외함. sfgfp의 경우 12개 서열 중 최대 2개의 에러를 허용함. 여기서도 역시 sfgfp 서열은 가능한 뒷쪽에 위치하는 것을 찾아야함. 또한 sfgfp head 서열 위치에서 forword hit 서열의 위치를 뺐을 때 음수인 경우는 제외함. 

```{r, eval=F}
sfgfphit <- vmatchPattern(sfgfphead, sigreads, min.mismatch = 0, max.mismatch = 2) %>% stack
selreadnames <- unique(as.character(mcols(sfgfphit)$name))
selreads <- sigreads[selreadnames]

forhit <- vmatchPattern(pfor, selreads, min.mismatch = 0, max.mismatch = 1) %>% stack
sfgfphit <- vmatchPattern(sfgfphead, selreads, min.mismatch = 0, max.mismatch = 2) %>% stack

## remove duplicated
forhit <- forhit[!duplicated(as.character(mcols(forhit)$name))]

sfgfphit <- sfgfphit[!duplicated(as.character(mcols(sfgfphit)$name))] 
## reordering
sfgfphit2 <- sfgfphit[length(sfgfphit):1]
sfgfphit2 <- sfgfphit2[!duplicated(as.character(mcols(sfgfphit2)$name))] 
sfgfphit <- sfgfphit2[length(sfgfphit2):1]

deli <- which(start(forhit) >= start(sfgfphit))
forhit <- forhit[-deli]
sfgfphit <- sfgfphit[-deli]
selreads <- selreads[-deli]

## extract target sequences
targetseq <- subseq(selreads, start(forhit), end(sfgfphit))

hist(nchar(targetseq), br=100)
```
![](images/Screenshot from 2021-05-03 16-34-33.png)

# z-test II 

그런데 위 그림과 같이 200bp 이상이 되는 서열들이 많이 포함되어 있음. 이러한 아웃라이어들을 제거해줄 필요가 있음. forward barcode primer와 sfgfp 서열 사이의 길이가 약 100bp 임을 가정하면 다음과 같이 z 테스트를 할 수 있음. 


```{r, eval=F}
## remove outliers
m <- 100
z <- (nchar(targetseq)-m)/sd(nchar(targetseq))
pvals <- 2*pnorm(-abs(z))
sigi <- which(pvals>0.5)
targetseq <- targetseq[sigi]

hist(nchar(targetseq), br=100)

```

![](images/Screenshot from 2021-05-03 16-37-53.png)

# Consensus 서열 확보

위와 같이 100bp 근처의 서열들이 의도대로 뽑힌 것을 알 수 있음. 이 서열들을 이용해서 align 후 consensus sequence를 추출함. 


```{r, eval=F}
## new the sequence database in the memory 
#dbDisconnect(dbConn)


seqaln <- AlignSeqs(targetseq[1:300])
BrowseSeqs(seqaln, patterns = c(pfor, sfgfphead))
conseq <- ConsensusSequence(seqaln, threshold = 0.9)

## remove "-" from the consensus sequence
ii <- gregexpr("-", as.character(conseq))
negpos <- ii[[1]]
pospos <- c(1:nchar(conseq))[-negpos]
tmpstr <- sapply(pospos, function(x){
  subseq(as.character(conseq), x, width=1)
})
finalseq <- paste(tmpstr, collapse="")

```

# 코드 재작성 

모든 바코드 경우에 대한 서열 추출을 위해 코드 재작성(함수로)

```{r, eval=F}

utr_tag_sequencing <- function(pfor, prev, m1=1000, m2=100){
  #pfor <- bcfor[i]
  #prev <- bcrev[j]
  
  forhit <- vmatchPattern(pfor, dna, min.mismatch=0, max.mismatch=1) %>% stack
  revhit <- vmatchPattern(prev, dna, min.mismatch=0, max.mismatch=1) %>% stack
  
  ## remove duplicated hits
  forhit <- forhit[!duplicated(as.character(mcols(forhit)$name))]
  
  ## reordering
  revhit2 <- revhit[length(revhit):1]
  revhit2 <- revhit2[!duplicated(as.character(mcols(revhit2)$name))] 
  revhit <- revhit2[length(revhit2):1]
  
  ## distance
  selifor <- which(as.character(mcols(forhit)$name) %in% as.character(mcols(revhit)$name))
  forstarti <- start(forhit[selifor])
  forhit <- forhit[selifor]
  selirev <- which(as.character(mcols(revhit)$name) %in% as.character(mcols(forhit)$name))
  revstarti <- start(revhit[selirev])
  revhit <- revhit[selirev]
  d <- revstarti - forstarti
  
  # z-test I
  z <- (d-m1)/sd(d)
  pvals <- 2*pnorm(-abs(z))
  sigi <- which(pvals>0.3)
  
  selreads <- dna[as.character(mcols(revhit)$name)]
  sigreads <- selreads[sigi]
  sfgfphead <- substr(sfgfpseq, 1, 12)
  
  sfgfphit <- vmatchPattern(sfgfphead, sigreads, min.mismatch = 0, max.mismatch = 2) %>% stack
  selreadnames <- unique(as.character(mcols(sfgfphit)$name))
  selreads <- sigreads[selreadnames]
  
  forhit <- vmatchPattern(pfor, selreads, min.mismatch = 0, max.mismatch = 1) %>% stack
  sfgfphit <- vmatchPattern(sfgfphead, selreads, min.mismatch = 0, max.mismatch = 2) %>% stack
  
  ## remove duplicated
  forhit <- forhit[!duplicated(as.character(mcols(forhit)$name))]
  
  sfgfphit <- sfgfphit[!duplicated(as.character(mcols(sfgfphit)$name))] 
  ## reordering
  sfgfphit2 <- sfgfphit[length(sfgfphit):1]
  sfgfphit2 <- sfgfphit2[!duplicated(as.character(mcols(sfgfphit2)$name))] 
  sfgfphit <- sfgfphit2[length(sfgfphit2):1]
  
  deli <- which(start(forhit) >= start(sfgfphit))
  forhit <- forhit[-deli]
  sfgfphit <- sfgfphit[-deli]
  selreads <- selreads[-deli]
  
  ## extract target sequences
  targetseq <- subseq(selreads, start(forhit), end(sfgfphit))
  
  
  z <- (nchar(targetseq)-m2)/sd(nchar(targetseq))
  pvals <- 2*pnorm(-abs(z))
  sigi <- which(pvals>0.5)
  targetseq <- targetseq[sigi]
  
  ncut <- length(targetseq)
  if(ncut > 500){
    ncut <- 500
  }
  seqaln <- AlignSeqs(targetseq[1:ncut], verbose=F)
  conseq <- ConsensusSequence(seqaln, threshold = 0.9)
  
  ## remove "-" from the consensus sequence
  ii <- gregexpr("-", as.character(conseq))
  negpos <- ii[[1]]
  pospos <- c(1:nchar(conseq))[-negpos]
  tmpstr <- sapply(pospos, function(x){
    subseq(as.character(conseq), x, width=1)
  })
  
  
  finalseq <- paste(tmpstr, collapse="")
  return(finalseq)
}


m1 <- 1000
m2 <- 100
wellrows <- LETTERS[1:8]
wellcols <- 1:12

#for(i in 1:length(bcfor)){
#  for(j in 1:length(bcrev)){
for(i in 1:4){
  for(j in 1:5){
    if(i == 1 & j == 1){
      wellpos <- paste0(wellrows[i], wellcols[j])
      barcode_for <- bcfor[i]
      barcode_rev <- bcrev[j]
      utr <- utr_tag_sequencing(bcfor[i], bcrev[j])
    }else{
      wellpos <- c(wellpos, paste0(wellrows[i], wellcols[j]))
      barcode_for <- c(barcode_for, bcfor[i])
      barcode_rev <- c(barcode_rev, bcrev[j])
      utr <- c(utr, utr_tag_sequencing(bcfor[i], bcrev[j]))
    }
    cat(i, j, "\n");flush.console()
  }
}

dat <- data.frame(wellpos, barcode_for, barcode_rev, unlist(utr))
write.table(dat, file="utr_sequences.txt", quote=F, col.names=F, row.names=F)
```

